%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (Robert S SIXPack) (SIXPack)%%Title: (BMBF_CMYK_Gef_M_e.eps)%%CreationDate: (7/28/04) (12:08 PM)%%BoundingBox: 213 369 370 497%%HiResBoundingBox: 213.7915 369.8999 369.3281 496.3125%%DocumentProcessColors: Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 297.5 420.5 297.5 420.5%AI3_TileBox: 29 31 567 812%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 191 497 2 1010 721 26 1 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:29 31%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 28.3465 8 28.3465 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 100 Lb(Ebene 2) Ln0 Auu0 O0 1 1 0 k300 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR258.9482 431.0703 m262.4912 431.0703 l262.4912 411 l258.9482 411 l258.9482 431.0703 l258.9482 431.0703 lf0 0.12 1 0.05 k258.9482 411 m262.4912 411 l262.4912 390.999 l258.9482 390.999 l258.9482 411 l258.9482 411 lf1 O0 0 0 1 k258.9482 451 m262.4912 451 l262.4912 431.001 l258.9482 431.001 l258.9482 451 l258.9482 451 lf*u238.7163 430.9971 m238.7163 430.9971 l238.7163 430.9971 lf1 D238.7173 430.9883 m238.7173 430.9883 l238.7173 430.9883 lf238.7153 430.9863 m238.7153 430.9863 l238.7153 430.9863 lf238.7153 431.001 m238.7153 431.001 l238.7153 431.001 lf247.896 447.6182 m247.896 448.7578 247.0674 449.6592 246.7759 449.9141 c246.5659 449.8662 l246.876 449.4873 247.4229 448.8535 247.4229 448.0137 c247.4229 446.3613 245.6763 444.9248 243.6831 444.8984 c243.6982 444.7285 243.6973 444.5781 243.6973 444.4502 c243.6973 444.2139 243.6821 443.9824 243.6538 443.7578 c245.916 443.7988 247.896 445.6377 247.896 447.6182 c247.896 447.6182 lf244.7773 433.9355 m243.8115 433.9355 243.6025 434.0371 243.3477 434.0371 c243.1841 434.0371 243.0288 434.0215 243.0288 433.79 c243.0288 433.6289 243.2095 433.3945 243.3726 433.2715 c243.5996 433.4971 243.9116 433.5459 244.415 433.5459 c244.6504 433.5459 244.9712 433.5 245.1128 433.4814 c245.0933 433.3418 245.0649 433.1621 245.0649 432.9092 c245.0649 432.7764 245.0698 432.6211 245.0698 432.457 c245.0698 431.8877 244.9863 431.585 244.7876 431.3564 c244.8306 431.3301 244.9448 431.3066 245.0132 431.3066 c245.3828 431.3066 245.4775 431.4951 245.4775 432.4551 c245.4775 432.7451 245.501 433.0137 245.501 433.083 c246.0176 432.6885 246.5444 431.9854 246.5444 431.4766 c246.7129 431.5635 246.9116 431.8184 246.9116 432.0098 c246.9116 432.3564 246.3325 432.8721 245.7183 433.4941 c245.8037 433.5146 246.0317 433.5801 246.2192 433.5801 c246.7017 433.5801 247.0918 433.5 247.3188 433.2324 c247.4087 433.3301 247.4829 433.624 247.4829 433.79 c247.4829 434.0791 247.3169 434.0693 247.1968 434.0693 c246.6831 434.0693 246.0483 433.9893 245.5938 433.9141 c245.4287 434.1348 244.376 435.5586 244.103 436.3184 c244.0244 436.3457 243.9634 436.3682 243.834 436.3682 c243.5811 436.3682 243.5151 436.1914 243.4497 435.9492 c244.0298 435.2451 244.5879 434.4795 244.7773 433.9355 c244.7773 433.9355 lf239.0132 435.9492 m238.9478 436.1914 238.8833 436.3682 238.6299 436.3682 c238.4995 436.3682 238.4385 436.3457 238.3618 436.3184 c238.0869 435.5586 237.0352 434.1348 236.8691 433.9141 c236.4165 433.9893 235.7798 434.0693 235.2671 434.0693 c235.146 434.0693 234.9805 434.0791 234.9805 433.79 c234.9805 433.624 235.0542 433.3301 235.145 433.2324 c235.3711 433.5 235.7622 433.5801 236.2441 433.5801 c236.4326 433.5801 236.6592 433.5146 236.7446 433.4941 c236.1304 432.8721 235.5513 432.3564 235.5513 432.0098 c235.5513 431.8184 235.751 431.5635 235.9194 431.4766 c235.9194 431.9854 236.4463 432.6885 236.9619 433.083 c236.9619 433.0137 236.9863 432.7451 236.9863 432.4551 c236.9863 431.4951 237.0811 431.3066 237.4507 431.3066 c237.5181 431.3066 237.6323 431.3301 237.6763 431.3564 c237.4775 431.585 237.3936 431.8877 237.3936 432.457 c237.3936 432.6211 237.3999 432.7764 237.3999 432.9092 c237.3999 433.1621 237.3701 433.3418 237.3511 433.4814 c237.4917 433.5 237.8135 433.5459 238.0488 433.5459 c238.5513 433.5459 238.8633 433.4971 239.0913 433.2715 c239.2544 433.3945 239.4351 433.6289 239.4351 433.79 c239.4351 434.0215 239.2798 434.0371 239.1157 434.0371 c238.8604 434.0371 238.6523 433.9355 237.686 433.9355 c237.876 434.4795 238.4331 435.2451 239.0132 435.9492 c239.0132 435.9492 lf235.041 448.0137 m235.041 448.8535 235.5879 449.4873 235.897 449.8662 c235.689 449.9141 l235.3955 449.6592 234.5679 448.7578 234.5679 447.6182 c234.5679 445.624 236.5757 443.7725 238.8589 443.7568 c238.8345 443.9736 238.8203 444.2031 238.8203 444.4502 c238.8203 444.6035 238.8267 444.7549 238.8398 444.8965 c236.8223 444.8965 235.041 446.3457 235.041 448.0137 c235.041 448.0137 lf241.1753 449.5498 m241.2793 449.7891 241.4189 450.0732 241.4189 450.3857 c241.4189 451.251 240.7017 451.6631 239.7417 451.6631 c239.2485 451.6631 238.9995 451.5039 238.9995 451.3438 c238.9995 451.1836 239.1626 450.832 239.2251 450.7236 c239.4023 450.8027 239.7231 450.8965 239.9087 450.8965 c240.5679 450.8965 241.0601 450.1572 241.1753 449.5498 c241.1753 449.5498 lf0 D241.647 450.6563 m242.2085 450.5469 242.5908 451.2637 242.0576 451.3916 c242.1313 451.1553 241.7725 450.9883 y241.6357 451.3047 241.813 451.4854 v241.4863 451.6455 241.4038 451.4512 241.3975 451.25 c241.5259 451.0781 241.6094 450.8779 241.647 450.6563 c241.647 450.6563 lf243.4639 445.7432 m243.5537 445.7373 243.6392 445.7324 243.729 445.7324 c245.3086 445.7324 246.876 446.7539 246.876 448.0635 c246.876 448.7617 246.562 449.25 246.1738 449.791 c245.9463 449.7529 245.7388 449.7314 245.5757 449.7314 c244.8599 449.7314 244.4717 450.1152 244.4434 450.4922 c244.4434 450.8311 244.7192 451.0879 245.1475 451.0879 c245.812 451.0879 247.0234 450.4658 248.2441 450.4658 c248.124 450.375 247.9243 450.2793 247.6836 450.1895 c248.3989 449.5449 248.877 448.6816 249.0596 447.7588 c250.9302 444.7646 l251.2441 444.2646 251.9087 443.2822 252.9092 442.5146 c251.6997 442.5146 250.896 442.4863 249.8735 444.1045 c248.915 445.6387 l248.8442 445.4404 248.7559 445.2471 248.6538 445.0576 c250.5605 442.0049 l250.8784 441.5 251.5347 440.5244 252.5405 439.7539 c251.3301 439.7539 250.5288 439.7246 249.5049 441.3438 c247.8633 443.9717 l247.7407 443.8418 247.6113 443.7139 247.4741 443.5908 c249.791 439.8838 l250.1099 439.376 250.7642 438.4063 251.771 437.6338 c250.5605 437.6338 249.7583 437.6055 248.7344 439.2246 c246.4771 442.8379 l246.3276 442.7432 246.1758 442.6533 246.0195 442.5664 c248.7744 438.1563 l249.0923 437.6504 249.7461 436.6787 250.7539 435.9063 c249.5444 435.9063 248.7407 435.8779 247.7192 437.4971 c244.8813 442.0391 l244.7134 441.9736 244.542 441.9131 244.3691 441.8574 c247.5767 436.7236 l247.8887 436.2266 248.5591 435.2402 249.5547 434.4746 c248.3452 434.4746 247.542 434.4463 246.52 436.0654 c243.1021 441.5361 l242.9976 441.5176 l242.9048 441.2217 242.8403 440.9453 242.8403 440.6699 c242.8403 438.9512 243.9683 437.4336 245.3228 436.2617 c245.2354 436.2246 245.0845 436.21 244.9448 436.21 c244.6665 436.21 244.4854 436.2266 244.3579 436.248 c244.6729 435.5342 245.3462 434.6143 245.6865 434.1377 c246.1299 434.2168 246.7749 434.2803 247.1968 434.2803 c247.6382 434.2803 247.687 434.0215 247.687 433.79 c247.687 433.3896 247.4995 433.0674 247.2822 432.8896 c247.2007 433.0967 247.0356 433.3701 246.2192 433.3701 c246.1367 433.3672 l246.3765 433.1006 247.1226 432.4971 247.1226 432.0098 c247.1226 431.6885 246.7695 431.2061 246.3032 431.2061 c246.3325 431.3096 246.3276 431.4053 246.3276 431.4766 c246.3276 431.8701 245.979 432.3311 245.6846 432.6523 c245.6919 432.5566 245.6885 432.5674 245.6885 432.4551 c245.6885 431.5244 245.605 431.0967 245.0132 431.0967 c244.7236 431.0967 244.5229 431.2559 244.4546 431.3027 c244.8379 431.6572 244.8589 431.9355 244.8589 432.457 c244.855 432.9092 l244.854 433.0283 244.856 433.1855 244.8745 433.3008 c244.6626 433.3301 244.5786 433.3291 244.415 433.3291 c243.5742 433.3955 243.3726 432.959 v243.145 433.167 242.8149 433.4619 242.8149 433.79 c242.8149 434.0049 242.916 434.248 243.3477 434.248 c243.5117 434.248 244.0273 434.1465 244.4585 434.1465 c244.3433 434.4043 243.8267 435.1582 243.3813 435.707 c243.313 435.4951 243.207 435.2637 242.9727 435.0771 c242.9404 435.4297 242.7344 436.541 242.1841 437.1904 c242.1201 436.752 242.0332 436.3008 242.0332 435.3506 c242.0332 433.0371 242.5898 431.3281 243.771 431.001 c243.6177 430.7324 243.293 430.4922 242.9556 430.4922 c242.5234 430.4922 242.2881 430.9814 242.0479 431.4434 c241.9233 431.1016 241.5786 430.2695 241.2314 430.2695 c240.8857 430.2695 240.5405 431.1016 240.416 431.4434 c240.1758 430.9814 239.9404 430.4922 239.5073 430.4922 c239.1709 430.4922 238.8457 430.7324 238.6929 431.001 c239.873 431.3281 240.4302 433.0371 240.4302 435.3506 c240.4302 436.3008 240.3438 436.752 240.2788 437.1904 c239.7295 436.541 239.5225 435.4297 239.4907 435.0771 c239.2563 435.2637 239.1504 435.4951 239.0825 435.707 c238.6367 435.1582 238.1211 434.4043 238.0044 434.1465 c238.437 434.1465 238.9517 434.248 239.1157 434.248 c239.5479 434.248 239.6499 434.0049 239.6499 433.79 c239.6499 433.4619 239.3179 433.167 239.0913 432.959 c238.8887 433.3955 238.0488 433.3291 y237.8857 433.3291 237.8013 433.3301 237.5894 433.3008 c237.6069 433.1855 237.6108 433.0283 237.6079 432.9092 c237.6055 432.457 l237.6055 431.9355 237.625 431.6572 238.0093 431.3027 c237.9409 431.2559 237.7402 431.0967 237.4507 431.0967 c236.8589 431.0967 236.7744 431.5244 236.7744 432.4551 c236.7744 432.5674 236.771 432.5566 236.7793 432.6523 c236.4839 432.3311 236.1362 431.8701 236.1362 431.4766 c236.1362 431.4053 236.1313 431.3096 236.1597 431.2061 c235.6948 431.2061 235.3413 431.6885 235.3413 432.0098 c235.3413 432.4971 236.0884 433.1006 236.3267 433.3672 c236.2441 433.3701 l235.4282 433.3701 235.2622 433.0967 235.1816 432.8896 c234.9634 433.0674 234.7759 433.3896 234.7759 433.79 c234.7759 434.0215 234.8257 434.2803 235.2671 434.2803 c235.6899 434.2803 236.334 434.2168 236.7773 434.1377 c237.1167 434.6143 237.79 435.5342 238.105 436.248 c237.9785 436.2266 237.7983 436.21 237.519 436.21 c237.3794 436.21 237.2275 436.2246 237.1421 436.2617 c238.4951 437.4336 239.6226 438.9512 239.6226 440.6699 c239.6226 440.9453 239.5591 441.2217 239.4653 441.5176 c239.3623 441.5361 l235.9438 436.0654 l234.9214 434.4463 234.1187 434.4746 232.9092 434.4746 c233.9048 435.2402 234.5742 436.2266 234.8867 436.7236 c238.0947 441.8574 l237.9214 441.9131 237.7515 441.9736 237.5825 442.0391 c234.7451 437.4971 l233.7222 435.8779 232.9185 435.9063 231.7104 435.9063 c232.7173 436.6787 233.3706 437.6504 233.6885 438.1563 c236.4448 442.5664 l236.2871 442.6533 236.1353 442.7432 235.9863 442.8379 c233.7285 439.2246 l232.7051 437.6055 231.9033 437.6338 230.6929 437.6338 c231.6997 438.4063 232.3545 439.376 232.6724 439.8838 c234.9888 443.5908 l234.8525 443.7139 234.7227 443.8418 234.6006 443.9717 c232.959 441.3438 l231.9351 439.7246 231.1328 439.7539 229.9233 439.7539 c230.9282 440.5244 231.5854 441.5 231.9033 442.0049 c233.8091 445.0576 l233.708 445.2471 233.6201 445.4404 233.5488 445.6387 c232.5898 444.1045 l231.5669 442.4863 230.7642 442.5146 229.5552 442.5146 c230.5562 443.2822 231.2192 444.2646 231.5342 444.7646 c233.4043 447.7588 l233.5864 448.6816 234.0645 449.5449 234.7798 450.1895 c234.5405 450.2793 234.3398 450.375 234.2192 450.4658 c235.4404 450.4658 236.6509 451.0869 237.3154 451.0869 c237.7451 451.0869 238.0195 450.8311 238.0195 450.4922 c237.9927 450.1152 237.6035 449.7314 236.8872 449.7314 c236.7251 449.7314 236.5176 449.7529 236.2891 449.791 c235.9019 449.25 235.5879 448.7617 235.5879 448.0635 c235.5879 446.7539 237.1543 445.7324 238.7358 445.7324 c238.8247 445.7324 238.9102 445.7373 238.9995 445.7432 c239.3125 446.8037 239.979 447.5 240.5117 448.1807 c239.873 448.4131 239.1616 449.0195 239.1616 449.2939 c239.2422 449.3408 240.4653 448.9561 240.5923 448.9219 c240.6182 448.915 240.6445 448.9131 240.6738 448.9219 c240.8228 448.9668 240.9473 449.1846 240.9473 449.207 c240.8164 449.2285 240.0493 449.3281 239.5244 449.5186 c239.126 449.6641 238.9243 449.9287 238.9243 450.0293 c239.0518 450.0498 239.5376 449.7949 240.25 449.7949 c240.5132 449.7949 240.5649 449.8057 240.8267 449.8379 c240.6426 450.2754 240.2969 450.6455 239.9087 450.6455 c239.752 450.6455 239.4102 450.5479 239.124 450.4053 c238.9253 450.7139 238.75 451.1211 238.75 451.3438 c238.75 451.6055 239.0098 451.9131 239.7417 451.9131 c239.9463 451.9131 240.1372 451.8955 240.3154 451.8623 c240.458 451.8359 240.5781 451.8037 240.7075 451.7529 c240.6973 451.7705 240.6914 451.8096 240.6914 451.8457 c240.6914 451.9473 240.7832 452.0537 241.1274 452.0537 c241.7295 452.0537 242.3472 451.8564 243.1045 451.8564 c243.3008 451.8564 243.4336 451.8623 243.5474 451.9102 c243.4985 451.7598 243.2856 451.5371 243.0903 451.3574 c243.2104 451.1924 243.5239 450.7959 243.5239 450.1543 c243.5239 449.124 242.8447 448.2744 242.8447 447.2324 c242.8447 446.6133 243.3213 446.0684 243.4639 445.7432 c243.4639 445.7432 lf*U*u272.4165 421.8125 m272.5044 419.9863 271.811 419.6387 271.251 419.6387 c270.6353 419.6387 270.3662 420.1318 270.3662 420.6816 c270.3662 421.8799 271.542 421.8008 272.4165 421.8125 c272.4165 421.8125 lf1 D272.439 419.001 m273.4468 419.001 l273.3794 419.4375 273.3345 419.8965 273.3345 420.3447 c273.3345 423.0664 l273.3345 424.0186 272.9526 424.7686 271.4966 424.7686 c270.2988 424.7686 269.6274 424.332 269.5825 423.0664 c270.5791 423.0664 l270.5229 423.6611 270.8481 424.0742 271.4639 424.0742 c272.4492 424.0742 272.439 423.2568 272.4165 422.5068 c271.1284 422.54 269.4473 422.4629 269.4473 420.748 c269.4473 419.6611 269.7954 418.8887 270.9932 418.8887 c271.6992 418.8887 272.1362 419.1689 272.4165 419.8184 c272.439 419.8184 l272.439 419.001 l272.439 419.001 lf*U0 D279.1128 419.001 m279.1128 422.9209 l279.1128 424.041 278.811 424.7686 277.6021 424.7686 c276.8745 424.7686 276.4487 424.5674 276.0894 423.9287 c276.0444 423.9287 l276.0444 424.6563 l275.0708 424.6563 l275.1035 424.2646 275.126 423.874 275.126 423.4805 c275.126 419.001 l276.0444 419.001 l276.0444 422.3506 l276.0444 423.123 276.1909 424.0186 277.1987 424.0186 c277.9824 424.0186 278.1953 423.5254 278.1953 422.9209 c278.1953 419.001 l279.1128 419.001 l279.1128 419.001 lf*u283.7173 422.0586 m283.7173 420.917 283.7173 419.6387 282.687 419.6387 c281.5337 419.6387 281.5337 420.8721 281.5337 421.7227 c281.5337 423.2344 281.667 424.0186 282.6528 424.0186 c283.6724 424.0186 283.7173 422.8086 283.7173 422.0586 c283.7173 422.0586 lf1 D283.7173 424.0859 m283.6831 424.0859 l283.3701 424.5332 282.9775 424.7686 282.4404 424.7686 c280.6138 424.7686 280.5698 423.1455 280.5698 421.7334 c280.5698 419.2471 281.4888 418.8887 282.395 418.8887 c282.9897 418.8887 283.3804 419.1465 283.6948 419.6738 c283.7173 419.6738 l283.7173 419.001 l284.6357 419.001 l284.6357 427.0869 l283.7173 427.0869 l283.7173 424.0859 l283.7173 424.0859 lf*U*u0 D289.9204 426.1924 m291.4775 426.1924 l292.2725 426.1924 292.5635 425.541 292.5635 424.959 c292.5635 424.2539 292.2061 423.6162 291.4663 423.6162 c289.9204 423.6162 l289.9204 426.1924 l289.9204 426.1924 lf1 D291.1309 422.7188 m291.4775 422.7188 292.2725 422.6758 292.3516 421.6895 c292.4404 420.6143 292.374 419.5605 292.665 419.001 c293.7393 419.001 l293.583 419.5049 293.4717 420.7705 293.46 421.1172 c293.4053 422.7412 293.0693 423.0557 292.1387 423.2012 c292.1387 423.2236 l293.0908 423.3906 293.6162 424.1191 293.6162 425.0713 c293.6162 426.0791 293.1143 427.0869 291.6792 427.0869 c288.8901 427.0869 l288.8901 419.001 l289.9204 419.001 l289.9204 422.7188 l291.1309 422.7188 l291.1309 422.7188 lf*U*u0 D295.9346 422.2266 m295.9443 423.7939 296.4268 424.0742 297.0088 424.0742 c297.6826 424.0742 298.1396 423.874 298.1396 422.2266 c295.9346 422.2266 l295.9346 422.2266 lf1 D299.1162 421.5322 m299.1162 422.0137 l299.1162 423.8838 298.7119 424.7686 297.0986 424.7686 c295.1396 424.7686 294.9482 423.4033 294.9482 421.7451 c294.9482 419.2471 295.9014 418.8887 297.0986 418.8887 c298.2861 418.8887 299.0576 419.46 299.0713 420.7139 c298.0635 420.7139 l298.0283 420.1436 297.7041 419.6387 297.0771 419.6387 c296.3584 419.6387 295.9346 419.9531 295.9346 421.5322 c299.1162 421.5322 l299.1162 421.5322 lf*U0 D304.2783 420.6143 m304.2783 422.3379 301.4561 422.3164 301.4561 423.3135 c301.4561 423.8057 301.8369 424.0742 302.3291 424.0742 c302.9131 424.0742 303.2256 423.7607 303.2158 423.168 c304.2334 423.168 l304.3115 424.2871 303.4502 424.7686 302.4424 424.7686 c300.8525 424.7686 300.4932 423.8164 300.4932 423.2236 c300.4932 421.5322 303.3154 421.5098 303.3154 420.502 c303.3154 419.9189 302.8896 419.6387 302.3408 419.6387 c301.4111 419.6387 301.3994 420.4014 301.3994 420.7256 c300.3584 420.7256 l300.3252 419.4268 301.0869 418.8887 302.3076 418.8887 c303.4268 418.8887 304.2783 419.3701 304.2783 420.6143 c304.2783 420.6143 lf*u306.5049 422.2266 m306.5146 423.7939 306.9971 424.0742 307.5811 424.0742 c308.2529 424.0742 308.71 423.874 308.71 422.2266 c306.5049 422.2266 l306.5049 422.2266 lf1 D309.6865 421.5322 m309.6865 422.0137 l309.6865 423.8838 309.2822 424.7686 307.6709 424.7686 c305.71 424.7686 305.5205 423.4033 305.5205 421.7451 c305.5205 419.2471 306.4717 418.8887 307.6709 418.8887 c308.8564 418.8887 309.6279 419.46 309.6416 420.7139 c308.6338 420.7139 l308.5986 420.1436 308.2744 419.6387 307.6475 419.6387 c306.9307 419.6387 306.5049 419.9531 306.5049 421.5322 c309.6865 421.5322 l309.6865 421.5322 lf*U*u0 D314.0986 421.8125 m314.1885 419.9863 313.4932 419.6387 312.9326 419.6387 c312.3174 419.6387 312.0498 420.1318 312.0498 420.6816 c312.0498 421.8799 313.2256 421.8008 314.0986 421.8125 c314.0986 421.8125 lf1 D314.1221 419.001 m315.1299 419.001 l315.0615 419.4375 315.0166 419.8965 315.0166 420.3447 c315.0166 423.0664 l315.0166 424.0186 314.6357 424.7686 313.1807 424.7686 c311.9814 424.7686 311.3096 424.332 311.2646 423.0664 c312.2627 423.0664 l312.2061 423.6611 312.5303 424.0742 313.1455 424.0742 c314.1318 424.0742 314.1221 423.2568 314.0986 422.5068 c312.8115 422.54 311.1299 422.4629 311.1299 420.748 c311.1299 419.6611 311.4775 418.8887 312.6748 418.8887 c313.3818 418.8887 313.8193 419.1689 314.0986 419.8184 c314.1221 419.8184 l314.1221 419.001 l314.1221 419.001 lf*U0 D317.7607 424.6563 m316.8428 424.6563 l316.8428 419.001 l317.7607 419.001 l317.7607 422.3379 l317.7607 423.1006 318.0186 423.874 319.0381 423.874 c319.2061 423.874 319.3643 423.8389 319.5322 423.8164 c319.5322 424.7686 l318.6357 424.7686 318.1631 424.6689 317.7822 423.8057 c317.7607 423.8057 l317.7607 424.6563 l317.7607 424.6563 lf324.4404 422.8438 m324.4971 424.1084 323.8369 424.7686 322.7041 424.7686 c320.7451 424.7686 320.5537 423.4033 320.5537 421.7451 c320.5537 419.2471 321.5068 418.8887 322.7041 418.8887 c323.333 418.8887 324.5205 419.292 324.4854 420.8828 c323.5225 420.8828 l323.5576 419.8633 322.917 419.6387 322.7041 419.6387 c321.7529 419.6387 321.5186 420.2998 321.5186 422.1377 c321.5186 423.6836 321.999 424.0186 322.7041 424.0186 c323.0537 424.0186 323.5127 423.7715 323.4893 422.8438 c324.4404 422.8438 l324.4404 422.8438 lf330.1201 419.001 m330.1201 423.0107 l330.1201 424.2871 329.583 424.7686 328.6201 424.7686 c327.8799 424.7686 327.4541 424.5898 327.085 423.9287 c327.04 423.9287 l327.04 427.0869 l326.1221 427.0869 l326.1221 419.001 l327.04 419.001 l327.04 422.3281 l327.04 423.2793 327.2744 424.0186 328.1924 424.0186 c328.9775 424.0186 329.2002 423.5254 329.2002 422.8311 c329.2002 419.001 l330.1201 419.001 l330.1201 419.001 lf*u271.3701 431.6387 m270.4175 431.6387 270.1826 432.2998 270.1826 434.1377 c270.1826 435.6836 270.6646 436.0186 271.3701 436.0186 c272.0752 436.0186 272.5571 435.6836 272.5571 434.1377 c272.5571 432.2998 272.3218 431.6387 271.3701 431.6387 c271.3701 431.6387 lf1 D271.3701 430.8887 m272.5684 430.8887 273.521 431.2471 273.521 433.7451 c273.521 435.4033 273.3306 436.7686 271.3701 436.7686 c269.4092 436.7686 269.2197 435.4033 269.2197 433.7451 c269.2197 431.2471 270.1714 430.8887 271.3701 430.8887 c271.3701 430.8887 lf*U0 D274.271 436.6563 m274.271 435.9629 l275.1445 435.9629 l275.1445 431.001 l276.0625 431.001 l276.0625 435.9629 l277.2051 435.9629 l277.2051 436.6563 l276.0625 436.6563 l276.0625 437.6201 l276.0625 438.0791 276.23 438.4941 277.2051 438.4268 c277.2051 439.0869 l277.0703 439.1104 276.9585 439.1211 276.7686 439.1211 c275.9507 439.1211 275.1445 438.8975 275.1445 437.7539 c275.1445 436.6563 l274.271 436.6563 l274.271 436.6563 lf284.9058 431.001 m284.9058 431.8965 l281.7036 431.8965 l281.7036 434.6973 l284.6152 434.6973 l284.6152 435.5938 l281.7036 435.5938 l281.7036 438.1924 l284.8394 438.1924 l284.8394 439.0869 l280.6729 439.0869 l280.6729 431.001 l284.9058 431.001 l284.9058 431.001 lf*u289.1631 434.0586 m289.1631 432.917 289.1631 431.6387 288.1328 431.6387 c286.9785 431.6387 286.9785 432.8721 286.9785 433.7227 c286.9785 435.2344 287.1138 436.0186 288.0991 436.0186 c289.1182 436.0186 289.1631 434.8086 289.1631 434.0586 c289.1631 434.0586 lf1 D289.1631 436.0859 m289.1294 436.0859 l288.8154 436.5332 288.4243 436.7686 287.8862 436.7686 c286.061 436.7686 286.0161 435.1455 286.0161 433.7334 c286.0161 431.2471 286.9336 430.8887 287.8413 430.8887 c288.4346 430.8887 288.8276 431.1465 289.1406 431.6738 c289.1631 431.6738 l289.1631 431.001 l290.0811 431.001 l290.0811 439.0869 l289.1631 439.0869 l289.1631 436.0859 l289.1631 436.0859 lf*U0 D294.7959 432.9043 m294.7959 431.9639 294.1807 431.5947 293.6865 431.5947 c293.0381 431.5947 292.7256 432.0547 292.7256 432.7363 c292.7256 436.6563 l291.8066 436.6563 l291.8066 432.3447 l291.8066 431.3818 292.3447 430.8887 293.3291 430.8887 c293.9229 430.8887 294.46 431.1689 294.7627 431.6836 c294.7959 431.6836 l294.7959 431.001 l295.7725 431.001 l295.7373 431.3936 295.7158 431.7852 295.7158 432.1768 c295.7158 436.6563 l294.7959 436.6563 l294.7959 432.9043 l294.7959 432.9043 lf301.2822 434.8438 m301.3389 436.1084 300.6768 436.7686 299.5459 436.7686 c297.585 436.7686 297.3955 435.4033 297.3955 433.7451 c297.3955 431.2471 298.3486 430.8887 299.5459 430.8887 c300.1729 430.8887 301.3604 431.292 301.3271 432.8828 c300.3643 432.8828 l300.3975 431.8643 299.7588 431.6387 299.5459 431.6387 c298.5928 431.6387 298.3584 432.2998 298.3584 434.1377 c298.3584 435.6836 298.8408 436.0186 299.5459 436.0186 c299.8936 436.0186 300.3525 435.7715 300.3311 434.8438 c301.2822 434.8438 l301.2822 434.8438 lf*u305.8643 433.8125 m305.9521 431.9863 305.2588 431.6387 304.6982 431.6387 c304.083 431.6387 303.8135 432.1318 303.8135 432.6816 c303.8135 433.8799 304.9893 433.8008 305.8643 433.8125 c305.8643 433.8125 lf1 D305.8857 431.001 m306.8936 431.001 l306.8271 431.4375 306.7822 431.8965 306.7822 432.3447 c306.7822 435.0664 l306.7822 436.0186 306.4014 436.7686 304.9443 436.7686 c303.7451 436.7686 303.0752 436.332 303.0303 435.0664 c304.0264 435.0664 l303.9697 435.6611 304.2959 436.0742 304.9111 436.0742 c305.8975 436.0742 305.8857 435.2568 305.8643 434.5068 c304.5752 434.54 302.8955 434.4629 302.8955 432.748 c302.8955 431.6611 303.2432 430.8887 304.4404 430.8887 c305.1475 430.8887 305.583 431.1689 305.8643 431.8193 c305.8857 431.8193 l305.8857 431.001 l305.8857 431.001 lf*U0 D307.7451 436.6563 m307.7451 435.9629 l308.6748 435.9629 l308.6748 431.9414 l308.6748 431.292 309.0654 430.9336 309.9404 430.9336 c310.2412 430.9336 310.5439 431.001 310.8467 431.0244 c310.8467 431.7285 l310.6455 431.7061 310.499 431.6836 310.4326 431.6836 c309.5928 431.6836 309.5928 432.1445 309.5928 432.502 c309.5928 435.9629 l310.8252 435.9629 l310.8252 436.6563 l309.5928 436.6563 l309.5928 438.1572 l308.6748 437.7441 l308.6748 436.6563 l307.7451 436.6563 l307.7451 436.6563 lf*u1 D312.5791 436.6563 m311.6631 436.6563 l311.6631 431.001 l312.5791 431.001 l312.5791 436.6563 l312.5791 436.6563 lf311.6064 438.1025 m312.6377 438.1025 l312.6377 439.0869 l311.6064 439.0869 l311.6064 438.1025 l311.6064 438.1025 lf*U*u0 D316.1631 431.6387 m315.21 431.6387 314.9756 432.2998 314.9756 434.1377 c314.9756 435.6836 315.458 436.0186 316.1631 436.0186 c316.8682 436.0186 317.3506 435.6836 317.3506 434.1377 c317.3506 432.2998 317.1162 431.6387 316.1631 431.6387 c316.1631 431.6387 lf1 D316.1631 430.8887 m317.3604 430.8887 318.3135 431.2471 318.3135 433.7451 c318.3135 435.4033 318.124 436.7686 316.1631 436.7686 c314.2021 436.7686 314.0127 435.4033 314.0127 433.7451 c314.0127 431.2471 314.9658 430.8887 316.1631 430.8887 c316.1631 430.8887 lf*U0 D323.7568 431.001 m323.7568 434.9209 l323.7568 436.041 323.4541 436.7686 322.2451 436.7686 c321.5166 436.7686 321.0908 436.5674 320.7334 435.9287 c320.6885 435.9287 l320.6885 436.6563 l319.7139 436.6563 l319.7471 436.2646 319.7705 435.874 319.7705 435.4805 c319.7705 431.001 l320.6885 431.001 l320.6885 434.3506 l320.6885 435.123 320.833 436.0186 321.8408 436.0186 c322.626 436.0186 322.8389 435.5254 322.8389 434.9209 c322.8389 431.001 l323.7568 431.001 l323.7568 431.001 lf270.5791 443.001 m270.5791 446.6973 l273.4019 446.6973 l273.4019 447.5938 l270.5791 447.5938 l270.5791 450.1924 l273.5576 450.1924 l273.5576 451.0869 l269.5488 451.0869 l269.5488 443.001 l270.5791 443.001 l270.5791 443.001 lf*u275.3931 446.2266 m275.4033 447.7939 275.8853 448.0742 276.4673 448.0742 c277.1396 448.0742 277.5991 447.874 277.5991 446.2266 c275.3931 446.2266 l275.3931 446.2266 lf1 D278.5732 445.5322 m278.5732 446.0137 l278.5732 447.8838 278.1699 448.7686 276.5566 448.7686 c274.5972 448.7686 274.4058 447.4033 274.4058 445.7451 c274.4058 443.2471 275.3584 442.8887 276.5566 442.8887 c277.7441 442.8887 278.5166 443.46 278.5278 444.7139 c277.52 444.7139 l277.4863 444.1445 277.1621 443.6387 276.5342 443.6387 c275.8179 443.6387 275.3931 443.9531 275.3931 445.5322 c278.5732 445.5322 l278.5732 445.5322 lf*U*u0 D283.0869 446.0586 m283.0869 444.917 283.0869 443.6387 282.0566 443.6387 c280.9038 443.6387 280.9038 444.8721 280.9038 445.7227 c280.9038 447.2344 281.0366 448.0186 282.0229 448.0186 c283.042 448.0186 283.0869 446.8086 283.0869 446.0586 c283.0869 446.0586 lf1 D283.0869 448.0859 m283.0532 448.0859 l282.7402 448.5332 282.3472 448.7686 281.8101 448.7686 c279.9839 448.7686 279.9399 447.1455 279.9399 445.7334 c279.9399 443.2471 280.8589 442.8887 281.7651 442.8887 c282.3599 442.8887 282.7515 443.1465 283.0645 443.6738 c283.0869 443.6738 l283.0869 443.001 l284.0049 443.001 l284.0049 451.0869 l283.0869 451.0869 l283.0869 448.0859 l283.0869 448.0859 lf*U*u0 D286.5923 446.2266 m286.6045 447.7939 287.0854 448.0742 287.6675 448.0742 c288.3398 448.0742 288.8003 447.874 288.8003 446.2266 c286.5923 446.2266 l286.5923 446.2266 lf1 D289.7734 445.5322 m289.7734 446.0137 l289.7734 447.8838 289.3701 448.7686 287.7578 448.7686 c285.7983 448.7686 285.6069 447.4033 285.6069 445.7451 c285.6069 443.2471 286.5596 442.8887 287.7578 442.8887 c288.9458 442.8887 289.7183 443.46 289.7285 444.7139 c288.7207 444.7139 l288.688 444.1445 288.3623 443.6387 287.7354 443.6387 c287.019 443.6387 286.5923 443.9531 286.5923 445.5322 c289.7734 445.5322 l289.7734 445.5322 lf*U0 D292.249 448.6563 m291.3315 448.6563 l291.3315 443.001 l292.249 443.001 l292.249 446.3379 l292.249 447.1006 292.5068 447.874 293.5264 447.874 c293.6943 447.874 293.8506 447.8389 294.0186 447.8164 c294.0186 448.7686 l293.124 448.7686 292.6533 448.6689 292.2725 447.8057 c292.249 447.8057 l292.249 448.6563 l292.249 448.6563 lf*u297.9092 445.8125 m297.999 443.9863 297.3057 443.6387 296.7451 443.6387 c296.1279 443.6387 295.8604 444.1318 295.8604 444.6816 c295.8604 445.8799 297.0361 445.8008 297.9092 445.8125 c297.9092 445.8125 lf1 D297.9326 443.001 m298.9404 443.001 l298.8721 443.4375 298.8271 443.8965 298.8271 444.3447 c298.8271 447.0664 l298.8271 448.0186 298.4463 448.7686 296.9912 448.7686 c295.7939 448.7686 295.1201 448.332 295.0752 447.0664 c296.0732 447.0664 l296.0186 447.6611 296.3408 448.0742 296.958 448.0742 c297.9443 448.0742 297.9326 447.2568 297.9092 446.5068 c296.6221 446.54 294.9424 446.4629 294.9424 444.748 c294.9424 443.6611 295.2881 442.8887 296.4873 442.8887 c297.1943 442.8887 297.6299 443.1689 297.9092 443.8193 c297.9326 443.8193 l297.9326 443.001 l297.9326 443.001 lf*U0 D301.5166 451.0869 m300.5986 451.0869 l300.5986 443.001 l301.5166 443.001 l301.5166 451.0869 l301.5166 451.0869 lf306.667 450.1924 m306.6885 450.1924 l308.9053 443.001 l309.8818 443.001 l312.1436 450.1924 l312.165 450.1924 l312.165 443.001 l313.1943 443.001 l313.1943 451.0869 l311.4932 451.0869 l309.4326 444.2998 l309.4111 444.2998 l307.3721 451.0869 l305.7041 451.0869 l305.7041 443.001 l306.667 443.001 l306.667 450.1924 l306.667 450.1924 lf*u1 D315.8115 448.6563 m314.8916 448.6563 l314.8916 443.001 l315.8115 443.001 l315.8115 448.6563 l315.8115 448.6563 lf314.835 450.1025 m315.8662 450.1025 l315.8662 451.0869 l314.835 451.0869 l314.835 450.1025 l314.835 450.1025 lf*U0 D321.3877 443.001 m321.3877 446.9209 l321.3877 448.041 321.085 448.7686 319.874 448.7686 c319.1455 448.7686 318.7197 448.5674 318.3623 447.9287 c318.3174 447.9287 l318.3174 448.6563 l317.3428 448.6563 l317.3779 448.2646 317.3994 447.874 317.3994 447.4805 c317.3994 443.001 l318.3174 443.001 l318.3174 446.3506 l318.3174 447.123 318.4619 448.0186 319.4717 448.0186 c320.2549 448.0186 320.4678 447.5254 320.4678 446.9209 c320.4678 443.001 l321.3877 443.001 l321.3877 443.001 lf*u1 D323.8955 448.6563 m322.9775 448.6563 l322.9775 443.001 l323.8955 443.001 l323.8955 448.6563 l323.8955 448.6563 lf322.9209 450.1025 m323.9521 450.1025 l323.9521 451.0869 l322.9209 451.0869 l322.9209 450.1025 l322.9209 450.1025 lf*U0 D329.124 444.6143 m329.124 446.3379 326.3037 446.3164 326.3037 447.3135 c326.3037 447.8057 326.6846 448.0742 327.1768 448.0742 c327.7588 448.0742 328.0713 447.7607 328.0615 447.168 c329.0791 447.168 l329.1592 448.2871 328.2959 448.7686 327.2881 448.7686 c325.6982 448.7686 325.3389 447.8164 325.3389 447.2236 c325.3389 445.5322 328.1611 445.5098 328.1611 444.502 c328.1611 443.9189 327.7373 443.6387 327.1865 443.6387 c326.2588 443.6387 326.2451 444.4014 326.2451 444.7256 c325.2061 444.7256 l325.1709 443.4268 325.9326 442.8887 327.1533 442.8887 c328.2744 442.8887 329.124 443.3711 329.124 444.6143 c329.124 444.6143 lf329.626 448.6563 m329.626 447.9629 l330.5557 447.9629 l330.5557 443.9414 l330.5557 443.292 330.9482 442.9336 331.8213 442.9336 c332.124 442.9336 332.4268 443.001 332.7295 443.0244 c332.7295 443.7285 l332.5264 443.7061 332.3818 443.6836 332.3135 443.6836 c331.4736 443.6836 331.4736 444.1445 331.4736 444.502 c331.4736 447.9629 l332.7061 447.9629 l332.7061 448.6563 l331.4736 448.6563 l331.4736 450.1572 l330.5557 449.7441 l330.5557 448.6563 l329.626 448.6563 l329.626 448.6563 lf334.5166 448.6563 m333.6006 448.6563 l333.6006 443.001 l334.5166 443.001 l334.5166 446.3379 l334.5166 447.1006 334.7744 447.874 335.7959 447.874 c335.9639 447.874 336.1201 447.8389 336.2881 447.8164 c336.2881 448.7686 l335.3916 448.7686 334.9209 448.6689 334.54 447.8057 c334.5166 447.8057 l334.5166 448.6563 l334.5166 448.6563 lf337.6357 448.6563 m336.5732 448.6563 l338.4873 443.001 l337.8486 440.8623 l338.8018 440.8623 l341.3643 448.6563 l340.3701 448.6563 l339.0146 444.0547 l338.9912 444.0547 l337.6357 448.6563 l337.6357 448.6563 lfUu*u0 O0 g800 Ar269.9038 472.542 m269.9038 472.395 L269.9038 471.709 270.3379 471.4922 270.751 471.4922 c271.2617 471.4922 271.6538 471.709 271.6538 472.311 c271.6538 473.4312 269.3857 473.3052 269.3857 474.8242 c269.3857 475.7202 270.0229 476.1963 270.8696 476.1963 c271.7939 476.1963 272.312 475.748 272.27 474.7192 c271.5977 474.7192 L271.605 475.272 271.4297 475.6362 270.8208 475.6362 c270.436 475.6362 270.0439 475.4399 270.0439 474.894 c270.0439 473.7813 272.312 473.9419 272.312 472.3389 c272.312 471.2749 271.5767 470.9321 270.7437 470.9321 c269.2529 470.918 269.2529 472.0591 269.2666 472.542 C269.9038 472.542 lf*U*u273.3828 471.0371 m273.3828 476.0913 L274.8809 476.0913 L275.5601 476.0913 276.2876 475.8389 276.2876 474.6489 c276.2876 473.501 275.3916 473.2632 274.874 473.2632 c274.0269 473.2632 L274.0269 471.0371 L273.3828 471.0371 lf1 D274.0269 473.8232 m274.7339 473.8232 L275 473.8232 275.6299 473.8931 275.6299 474.6841 c275.6299 475.4541 275.0557 475.5313 274.916 475.5313 c274.0269 475.5313 L274.0269 473.8232 lf*U*u0 D277.1699 472.8853 m277.1699 474.5439 L277.1699 475.5522 277.688 476.1963 278.7588 476.1963 c279.8296 476.1963 280.3477 475.5522 280.3477 474.5439 c280.3477 472.8853 L280.3477 471.4854 279.8296 470.9321 278.7588 470.9321 c277.688 470.9321 277.1699 471.4854 277.1699 472.8853 cf1 D279.6899 472.8569 m279.6899 474.5649 L279.6899 475.6221 278.9619 475.6572 278.7588 475.6572 c278.5557 475.6572 277.8276 475.6221 277.8276 474.5649 c277.8276 472.8569 L277.8276 471.751 278.1499 471.4712 278.7588 471.4712 c279.3677 471.4712 279.6899 471.751 279.6899 472.8569 cf*U*u0 D284.9678 476.0913 m284.9678 471.0371 L284.0859 471.0371 L282.0908 475.4189 L282.0767 475.4189 L282.0767 471.0371 L281.5029 471.0371 L281.5029 476.0913 L282.4126 476.0913 L284.3799 471.7651 L284.3936 471.7651 L284.3936 476.0913 L284.9678 476.0913 lf*U*u286.6338 472.542 m286.6338 472.395 L286.6338 471.709 287.0679 471.4922 287.4805 471.4922 c287.9917 471.4922 288.3838 471.709 288.3838 472.311 c288.3838 473.4312 286.1157 473.3052 286.1157 474.8242 c286.1157 475.7202 286.7529 476.1963 287.5996 476.1963 c288.5239 476.1963 289.0415 475.748 288.9995 474.7192 c288.3276 474.7192 L288.335 475.272 288.1597 475.6362 287.5508 475.6362 c287.1655 475.6362 286.7739 475.4399 286.7739 474.894 c286.7739 473.7813 289.0415 473.9419 289.0415 472.3389 c289.0415 471.2749 288.3066 470.9321 287.4736 470.9321 c285.9829 470.918 285.9829 472.0591 285.9966 472.542 C286.6338 472.542 lf*U*u290.0078 472.8853 m290.0078 474.5439 L290.0078 475.5522 290.5259 476.1963 291.5967 476.1963 c292.6675 476.1963 293.1855 475.5522 293.1855 474.5439 c293.1855 472.8853 L293.1855 471.4854 292.6675 470.9321 291.5967 470.9321 c290.5259 470.9321 290.0078 471.4854 290.0078 472.8853 cf1 D292.5278 472.8569 m292.5278 474.5649 L292.5278 475.6221 291.7998 475.6572 291.5967 475.6572 c291.3936 475.6572 290.6655 475.6221 290.6655 474.5649 c290.6655 472.8569 L290.6655 471.751 290.9878 471.4712 291.5967 471.4712 c292.2056 471.4712 292.5278 471.751 292.5278 472.8569 cf*U*u0 D294.9355 473.3613 m294.9355 471.0371 L294.2915 471.0371 L294.2915 476.0913 L296.0347 476.0913 L296.9307 476.0913 297.2456 475.4609 297.2456 474.8311 c297.2456 474.2363 296.9165 473.7813 296.3218 473.6763 c296.3218 473.6621 L296.9028 473.5713 297.1128 473.375 297.1475 472.3604 c297.1548 472.1431 297.2246 471.3521 297.3228 471.0371 c296.6509 471.0371 L296.4688 471.3872 296.5107 472.0449 296.4546 472.7173 c296.4058 473.333 295.9087 473.3613 295.6919 473.3613 C294.9355 473.3613 lf1 D294.9355 473.9209 m295.9019 473.9209 L296.3638 473.9209 296.5879 474.3203 296.5879 474.7612 c296.5879 475.125 296.4058 475.5313 295.9087 475.5313 c294.9355 475.5313 L294.9355 473.9209 lf*U*u0 D298.1978 471.0371 m298.1978 476.0913 L300.8018 476.0913 L300.8018 475.5313 L298.8418 475.5313 L298.8418 473.9072 L300.6616 473.9072 L300.6616 473.3472 L298.8418 473.3472 L298.8418 471.5972 L300.8438 471.5972 L300.8438 471.0371 L298.1978 471.0371 lf*U*u301.7119 476.0913 m303.2656 476.0913 L303.9097 476.0913 304.3716 475.8599 304.6235 475.3213 c304.8267 474.894 304.8477 473.8862 304.8477 473.7251 c304.8477 472.647 304.7495 472.0239 304.5396 471.688 c304.2666 471.2539 303.7559 471.0371 302.8735 471.0371 c301.7119 471.0371 L301.7119 476.0913 lf1 D302.3555 471.5972 m302.9648 471.5972 L303.8608 471.5972 304.1895 471.9331 304.1895 473.1089 c304.1895 474.1309 L304.1895 475.1533 303.8745 475.5313 303.2026 475.5313 c302.3555 475.5313 L302.3555 471.5972 lf*U*u0 D307.5913 471.0371 m307.5913 476.0913 L309.2363 476.0913 L309.9365 476.0913 310.1743 475.853 310.3633 475.5732 c310.5386 475.3003 310.5664 474.999 310.5664 474.9009 c310.5664 474.271 310.3496 473.8511 309.6987 473.7041 c309.6987 473.6689 L310.4194 473.585 310.7344 473.1509 310.7344 472.458 c310.7344 471.1631 309.7896 471.0371 309.2153 471.0371 C307.5913 471.0371 lf1 D308.2354 473.9629 m309.1733 473.9629 L309.6777 473.9702 309.9224 474.2783 309.9224 474.7681 c309.9224 475.188 309.6846 475.5313 309.1455 475.5313 c308.2354 475.5313 L308.2354 473.9629 lf308.2354 471.5972 m309.1455 471.5972 L309.8315 471.5972 310.0767 472.0869 310.0767 472.458 c310.0767 473.2632 309.5796 473.4033 308.9214 473.4033 c308.2354 473.4033 L308.2354 471.5972 lf*U*u0 D314.0244 476.0913 m314.6753 476.0913 L313.2964 472.9619 L313.2964 471.0371 L312.6523 471.0371 L312.6523 472.9619 L311.2944 476.0913 L312.0156 476.0913 L313.0024 473.6479 L314.0244 476.0913 lf*U*u319.6943 476.0913 m319.6943 475.5313 L318.3643 475.5313 L318.3643 471.0371 L317.7202 471.0371 L317.7202 475.5313 L316.3901 475.5313 L316.3901 476.0913 L319.6943 476.0913 lf*U*u320.4014 471.0371 m320.4014 476.0913 L321.0454 476.0913 L321.0454 473.9072 L322.8164 473.9072 L322.8164 476.0913 L323.4604 476.0913 L323.4604 471.0371 L322.8164 471.0371 L322.8164 473.3472 L321.0454 473.3472 L321.0454 471.0371 L320.4014 471.0371 lf*U*u324.6362 471.0371 m324.6362 476.0913 L327.2402 476.0913 L327.2402 475.5313 L325.2803 475.5313 L325.2803 473.9072 L327.1001 473.9072 L327.1001 473.3472 L325.2803 473.3472 L325.2803 471.5972 L327.2822 471.5972 L327.2822 471.0371 L324.6362 471.0371 lf*UUU1 Ap369.3281 369.8999 m213.7915 369.8999 L213.7915 496.3125 L369.3281 496.3125 L369.3281 369.8999 LnLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF